import logging
from pathlib import Path

import pandas as pd

from lib.shared.target_utils import get_valid_combinations
from lib.shared.initialize_paramsearch import initialize_segment_sbs_paramsearch
from lib.shared.initialize_paramsearch import initialize_segment_phenotype_paramsearch


# Get the general configuration options
ROOT_FP = Path(config["all"]["root_fp"])

# Get paths to the sample files dfs
SBS_SAMPLES_FP = Path(config["preprocess"]["sbs_samples_fp"])
PHENOTYPE_SAMPLES_FP = Path(config["preprocess"]["phenotype_samples_fp"])

# Load sbs samples if they exist
sbs_samples_df = pd.read_csv(SBS_SAMPLES_FP, sep="\t")
SBS_SAMPLE_FPS = list(sbs_samples_df["sample_fp"].unique())
if len(SBS_SAMPLE_FPS) > 0:
    SBS_WELLS = list(sbs_samples_df["well"].unique())
    SBS_TILES = range(config["preprocess"]["sbs_tiles"])
    SBS_CYCLES = sorted(list(sbs_samples_df["cycle"].unique()))
    SBS_VALID_COMBINATIONS = get_valid_combinations(sbs_samples_df)
else:
    SBS_WELLS = []
    SBS_TILES = []
    SBS_CYCLES = []
    SBS_VALID_COMBINATIONS = []


# Load phenotype samples if they exist
phenotype_samples_df = pd.read_csv(PHENOTYPE_SAMPLES_FP, sep="\t")
PHENOTYPE_SAMPLE_FPS = list(phenotype_samples_df["sample_fp"].unique())
if len(PHENOTYPE_SAMPLE_FPS) > 0:
    PHENOTYPE_WELLS = list(phenotype_samples_df["well"].unique())
    PHENOTYPE_TILES = range(config["preprocess"]["phenotype_tiles"])
    PHENOTYPE_CHANNELS = list(phenotype_samples_df["channel"].unique())
else:
    PHENOTYPE_WELLS = []
    PHENOTYPE_TILES = []
    PHENOTYPE_CHANNELS = []


# NOTE: restrict wells and tiles for testing
# TODO: unrestrict wells and tiles after testing
SBS_WELLS = ["A1", "A2"]
# SBS_TILES = [1]
# SBS_CYLES = []
PHENOTYPE_WELLS = ["A1", "A2"]
# PHENOTYPE_TILES = [1]

include: "targets/preprocess_well.smk"
include: "rules/preprocess_well.smk"


ALL_TARGETS = PREPROCESS_TARGETS_ALL

if "sbs_process" in config and len(SBS_SAMPLE_FPS) > 0:
    # Initialize parameter search configurations if needed
    if config["sbs_process"]["mode"] == "segment_sbs_paramsearch":
        config = initialize_segment_sbs_paramsearch(config)

    # Include target and rule files
    include: "targets/sbs_process.smk"
    include: "rules/sbs_process.smk"

    ALL_TARGETS += SBS_PROCESS_TARGETS_ALL


if "phenotype_process" in config and len(PHENOTYPE_SAMPLE_FPS) > 0:
    # Initialize parameter search configurations if needed
    if config["phenotype_process"]["mode"] == "segment_phenotype_paramsearch":
        config = initialize_segment_phenotype_paramsearch(config)

    # Include target and rule files
    include: "targets/phenotype_process.smk"
    include: "rules/phenotype_process.smk"

    ALL_TARGETS += PHENOTYPE_PROCESS_TARGETS_ALL


if "merge_process" in config:

    # Include target and rule files
    include: "targets/merge_process.smk"
    include: "rules/merge_process.smk"

    ALL_TARGETS += MERGE_PROCESS_TARGETS_ALL


if "aggregate_process" in config:

    # Include target and rule files
    include: "targets/aggregate_process.smk"
    include: "rules/aggregate_process.smk"

    ALL_TARGETS += AGGREGATE_PROCESS_TARGETS_ALL
    

# Define the target files for the workflow
rule all:
    input:
        ALL_TARGETS,
